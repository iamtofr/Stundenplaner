package online.stundenplaner.domain

import com.fasterxml.jackson.annotation.JsonIdentityInfo
import com.fasterxml.jackson.annotation.JsonIgnore
import com.fasterxml.jackson.annotation.ObjectIdGenerators
import online.stundenplaner.persistence.Persistable

/**
 * Data class for subjects.
 * @property name the name of the subject
 * @property grade the grade this subject will be held in. (Ignored by the algorithm so far.)
 * @property occurrences how often this subject will be held per class
 * @property requiredEquipment the equipment required in the room
 * @property requiredRoomType the room type required (e.g. "sports hall")
 */
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator::class, property = "_id")
data class Subject(
  val name: String?,
  val grade: Int,
  val occurrences: Int,
  val requiredEquipment: String?,
  val requiredRoomType: String?
) : Persistable() {
  /**
   * The teachers required by this subject - needs to be injected afterwards.
   */
  @JsonIgnore
  val requiredTeacher: MutableSet<Teacher> = mutableSetOf()
}

/**
 * Data class for teachers.
 * @property subjectSpecialisations the subjects this teacher can teach
 */
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator::class, property = "_id")
class Teacher(
  val subjectSpecialisations: List<Subject>
) : Persistable()

/**
 * Data class for courses, you'd normally call this class, but since we're programming that's a bad name.
 * @property grade the grade this class is in
 * @property letter to further identify what class it is
 */
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator::class, property = "_id")
data class Course(
  val grade: Int,
  val letter: String,
  @JsonIgnore var studentSize: Int
) : Persistable()

/**
 * Data class for days.
 * !! Not expected from the data base, instead generated by its periods. !!
 * @property periods the periods this day mapped to their time slots.
 * @property weekday what week day this day represents as Int
 */
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator::class, property = "_id")
data class Day(
  val periods: MutableMap<Int, Period>,
  val weekday: Int
) : Persistable() {

  /**
   * Adds a period to this day
   */
  fun addPeriod(period: Period) {
    periods[period.timeSlot] = period
  }

  companion object {
    /**
     * All known days.
     */
    val DAYS = mutableListOf<Day>()
  }

}

/**
 * Data class for periods.
 * @property timeSlot the time slot this period is in per day
 * @property weekday the weekday of this period. Will automatically add itself to this day's [Day.periods].
 */
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator::class, property = "_id")
data class Period(
  var timeSlot: Int,
  val weekday: Int
) : Persistable() {
  /**
   * This period's day. Will be automatically added.
   */
  @JsonIgnore
  val day: Day

  init {
    timeSlot--
    var day = Day.DAYS.find { it.weekday == weekday }

    if (day == null) {
      day = Day(HashMap(), weekday)
      Day.DAYS.add(day)
    }

    day.addPeriod(this)
    this.day = day
  }
}

/**
 * Data class for rooms.
 * @property number this room's number
 * @property house the name of the house this room is located in
 * @property seats the amount of seats in this room
 * @property barrierFree whether this room is handicapped accessible
 * @property equipment the equipment in this room
 * @property roomType the type of this room (e.g. "sports hall")
 */
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator::class, property = "_id")
data class Room(
  val number: Int,
  val house: String,
  val seats: Int,
  val barrierFree: Boolean,
  val equipment: List<String>,
  val roomType: String?
) : Persistable()
