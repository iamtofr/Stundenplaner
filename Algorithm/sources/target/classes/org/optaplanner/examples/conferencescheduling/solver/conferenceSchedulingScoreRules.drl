/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.conferencescheduling.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.examples.conferencescheduling.domain.ConferenceParametrization;
import org.optaplanner.examples.conferencescheduling.domain.Room;
import org.optaplanner.examples.conferencescheduling.domain.Speaker;
import org.optaplanner.examples.conferencescheduling.domain.Talk;
import org.optaplanner.examples.conferencescheduling.domain.Timeslot;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Talk type of timeSlot"
    when
        Talk(timeSlot != null, !getTimeSlot().getTalkTypeSet().contains(getTalkType()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10000);
end
rule "Talk type of room"
    when
        Talk(room != null, !getRoom().getTalkTypeSet().contains(getTalkType()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10000);
end

rule "Room unavailable timeSlot"
    when
        Talk(hasUnavailableRoom())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10000);
end

rule "Room conflict"
    when
        Talk(timeSlot != null, $timeSlot : timeSlot,
                room != null, $room : room,
                $leftId : id)
        Talk(timeSlot != null, getTimeslot().overlaps($timeSlot),
                room == $room,
                id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "Speaker unavailable timeSlot"
    when
        Talk(hasAnyUnavailableSpeaker())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Speaker conflict"
    when
        $speaker : Speaker()
        Talk(hasSpeaker($speaker),
                timeSlot != null, $timeSlot : timeSlot,
                $leftId : id)
        Talk(hasSpeaker($speaker),
                timeSlot != null, getTimeslot().overlaps($timeSlot),
                id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Speaker required timeSlot tag"
    when
        Talk($count : missingSpeakerRequiredTimeslotTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Speaker prohibited timeSlot tag"
    when
        Talk($count : prevailingSpeakerProhibitedTimeslotTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Talk required timeSlot tag"
    when
        Talk($count : missingRequiredTimeslotTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Talk prohibited timeSlot tag"
    when
        Talk($count : prevailingProhibitedTimeslotTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Speaker required room tag"
    when
        Talk($count : missingSpeakerRequiredRoomTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Speaker prohibited room tag"
    when
        Talk($count : prevailingSpeakerProhibitedRoomTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Talk required room tag"
    when
        Talk($count : missingRequiredRoomTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

rule "Talk prohibited room tag"
    when
        Talk($count : prevailingProhibitedRoomTagCount() > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $count);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Theme track conflict"
    when
        ConferenceParametrization($weight : themeTrackConflict != 0)
        $leftTalk : Talk(timeSlot != null, $timeSlot : timeSlot,
                $leftId : id)
        $rightTalk : Talk(timeSlot != null,
                overlappingThemeTrackCount($leftTalk) > 0,
                getTimeslot().overlaps($timeSlot),
                id > $leftId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $rightTalk.overlappingThemeTrackCount($leftTalk));
end

rule "Sector conflict"
    when
        ConferenceParametrization($weight : sectorConflict != 0)
        $leftTalk : Talk(timeSlot != null, $timeSlot : timeSlot,
                $leftId : id)
        $rightTalk : Talk(timeSlot != null,
                overlappingSectorCount($leftTalk) > 0,
                getTimeslot().overlaps($timeSlot),
                id > $leftId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $rightTalk.overlappingSectorCount($leftTalk));
end

rule "Audience type diversity"
    when
        ConferenceParametrization($weight : audienceTypeDiversity != 0)
        $leftTalk : Talk(timeSlot != null, $timeSlot : timeSlot,
                $leftId : id)
        // TimeSlot.overlaps() is deliberately not used
        $rightTalk : Talk(timeSlot == $timeSlot,
                overlappingAudienceTypeCount($leftTalk) > 0,
                id > $leftId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $weight * $rightTalk.overlappingAudienceTypeCount($leftTalk));
end

rule "Audience type theme track conflict"
    when
        ConferenceParametrization($weight : themeTrackConflict != 0)
        $leftTalk : Talk(timeSlot != null, $timeSlot : timeSlot,
                $leftId : id)
        $rightTalk : Talk(timeSlot != null,
                overlappingThemeTrackCount($leftTalk) > 0,
                overlappingAudienceTypeCount($leftTalk) > 0,
                getTimeslot().overlaps($timeSlot),
                id > $leftId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $rightTalk.overlappingThemeTrackCount($leftTalk)
                * $rightTalk.overlappingAudienceTypeCount($leftTalk));
end

rule "Audience level diversity"
    when
        ConferenceParametrization($weight : audienceLevelDiversity != 0)
        Talk(timeSlot != null, $timeSlot : timeSlot,
                $audienceLevel : audienceLevel,
                $leftId : id)
        // TimeSlot.overlaps() is deliberately not used
        Talk(timeSlot == $timeSlot,
                audienceLevel != $audienceLevel,
                id > $leftId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $weight);
end

rule "Audience level flow per content violation"
    when
        ConferenceParametrization($weight : audienceLevelFlowPerContentViolation != 0)
        $leftTalk : Talk(timeSlot != null, $timeSlot : timeSlot,
                $audienceLevel : audienceLevel)
        $rightTalk : Talk(timeSlot != null,
                overlappingContentCount($leftTalk) > 0,
                audienceLevel < $audienceLevel,
                !timeSlot.endsBefore($timeSlot))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $rightTalk.overlappingContentCount($leftTalk));
end

rule "Content conflict"
    when
        ConferenceParametrization($weight : contentConflict != 0)
        $leftTalk : Talk(timeSlot != null, $timeSlot : timeSlot,
                $leftId : id)
        $rightTalk : Talk(timeSlot != null,
                overlappingContentCount($leftTalk) > 0,
                getTimeslot().overlaps($timeSlot),
                id > $leftId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $rightTalk.overlappingContentCount($leftTalk));
end

rule "Language diversity"
    when
        ConferenceParametrization($weight : languageDiversity != 0)
        Talk(timeSlot != null, $timeSlot : timeSlot,
                $language : language,
                $leftId : id)
        // TimeSlot.overlaps() is deliberately not used
        Talk(timeSlot == $timeSlot,
                language != $language,
                id > $leftId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, $weight);
end

rule "Speaker preferred timeSlot tag"
    when
        ConferenceParametrization($weight : speakerPreferredTimeslotTag != 0)
        Talk($count : missingSpeakerPreferredTimeslotTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $count);
end

rule "Talk preferred timeSlot tag"
    when
        ConferenceParametrization($weight : talkPreferredTimeslotTag != 0)
        Talk($count : missingPreferredTimeslotTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $count);
end

rule "Speaker undesired timeSlot tag"
    when
        ConferenceParametrization($weight : speakerUndesiredTimeslotTag != 0)
        Talk($count : prevailingSpeakerUndesiredTimeslotTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $count);
end

rule "Talk undesired timeSlot tag"
    when
        ConferenceParametrization($weight : talkUndesiredTimeslotTag != 0)
        Talk($count : prevailingUndesiredTimeslotTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $count);
end

rule "Speaker preferred room tag"
    when
        ConferenceParametrization($weight : speakerPreferredRoomTag != 0)
        Talk($count : missingSpeakerPreferredRoomTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $count);
end

rule "Talk preferred room tag"
    when
        ConferenceParametrization($weight : talkPreferredRoomTag != 0)
        Talk($count : missingPreferredRoomTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $count);
end

rule "Speaker undesired room tag"
    when
        ConferenceParametrization($weight : speakerUndesiredRoomTag != 0)
        Talk($count : prevailingSpeakerUndesiredRoomTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $count);
end

rule "Talk undesired room tag"
    when
        ConferenceParametrization($weight : talkUndesiredRoomTag != 0)
        Talk($count : prevailingUndesiredRoomTagCount() > 0)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $count);
end
